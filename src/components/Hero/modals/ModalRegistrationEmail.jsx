import React from 'react';
import { Formik } from 'formik';
import { object, string } from 'yup';

import {
  accent,
  bgColorGradientBtn,
  nameExp,
  passwordExp,
  white,
} from '../../../utils/variables.styled';
import { IconSvg } from '../../common/IconSvg';
import * as S from './ModalRegistrationEmail.styled';
import reCapcha from '../../../assets/home/modal/recapcha.png';
import { BtnRegistration } from './BtnRegistration';
import { BtnClose } from '../../common/BtnClose';
import { Input } from '../../modalElements/Input';
import { InputFieldPhone } from '../../modalElements/InputFieldPhone';
import { Note } from '../../modalElements/Note';

export const ModalRegistrationEmail = ( { onActiveModal } ) => {
  const scheme = object( {
    name: string()
      .min( 2, '–í–∫–∞–∂—ñ—Ç—å –º—ñ–Ω—ñ—ñ–º—É–º 2 –ª—ñ—Ç–µ—Ä–∏, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 30' )
      .max( 30, '–í–∫–∞–∂—ñ—Ç—å –º—ñ–Ω—ñ—ñ–º—É–º 2 –ª—ñ—Ç–µ—Ä–∏, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 30' )
      .matches( nameExp, '–Ü–º‚Äô—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏' )
      .required( '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è' ),
    email: string()
      .email( '–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–æ e-mail' )
      .required( '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à e-mail' ),
    phone: string().required( '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É' ),
    password: string()
      .matches(
        passwordExp,
        '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–µ–ª–∏–∫—É —Ç–∞ –º–∞–ª—É –ª—ñ—Ç–µ—Ä—É –ª–∞—Ç–∏–Ω–∏—Ü–µ—é, —Ü–∏—Ñ—Ä–∏ —ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∑–Ω–∞–∫'
      )
      .required( '–ü–∞—Ä–æ–ª—å –æ–±–æ–≤‚Äò—è–∑–∫–æ–≤–∏–π' ),
    capcha: string().required( '–í–∏–∫–æ–Ω–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É reCAPTCHA' ),
    accept: string().required( '–ü–æ–ª—ñ—Ç–∏–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –ø–æ–≥–æ–¥–∂–µ–Ω—ñ' ),
  } );

  const initialValues = {
    name: '',
    email: '',
    phone: '',
    password: '',
    capcha: '',
    accept: '',
  };

  const handleSubmit = ( values, { resetForm } ) => {
    console.log( 'üíôüíõ send Data registrationEmail to Backend :>> ', values );
    resetForm();
    onActiveModal();
  };

  return (
    <S.Modal>
      <BtnClose
        xlRight="50px"
        xlTop="40px"
        mdRight="15px"
        mdTop="15px"
        smRight="10px"
        smTop="10px"
        click={ onActiveModal }
      >
        <IconSvg
          xlWidth="60px"
          xlHeight="60px"
          mdWidth="36px"
          mdHeight="36px"
          smWidth="24px"
          smHeight="24px"
          icon="icon-close"
        />
      </BtnClose>

      <S.Article>
        <S.Title>
          <p>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</p>
        </S.Title>

        <Formik
          initialValues={ initialValues }
          validationSchema={ scheme }
          onSubmit={ handleSubmit }
        >
          {formik => {
            const {
              errors: { name, email, phone, password, capcha },
              touched,
              values,
              setValues,
              setTouched,
            } = formik;

            const isCheckCapcha = formik.values.capcha;
            const isDataUser
              = formik.initialValues.phone === formik.values.phone;

            const errName = name && touched.name;
            const errPassword = password && touched.password;
            const errEmail = email && touched.email;
            const errPhone = phone && touched.phone;

            const errCapcha = capcha && touched.capcha;

            const handleGetPhone = values => {
              setValues( prev => ( {
                ...prev,
                phone: values.value,
              } ) );

              setTouched( {
                ...touched,
                phone: values.touched,
              } );
            }; // –∑–Ω–∞—á–µ–Ω–Ω—è –∑ InputFieldPhone

            return (
              <S.FormEmail autoComplete="on">
                <Input
                  type="text"
                  name="name"
                  placeholder="–Ü–º‚Äô—è"
                  isStar={ true }
                  error={ errName }
                  value={ values.name }
                />

                <Input
                  type="email"
                  name="email"
                  placeholder="–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞"
                  isStar={ true }
                  error={ errEmail }
                  value={ values.email }
                />

                <S.LabelFormUser>
                  <InputFieldPhone
                    name="phone"
                    valueInput={ formik.values.phone }
                    submitPhone={ handleGetPhone }
                    $isDataUser={ isDataUser }
                    $error={ errPhone }
                    // ----------- use for PhoneSelect
                    $xlPositionTopList="15px"
                    $smPositionTopList="7px"
                    $xlPositionLeftList="32px"
                    $xlHeightList="280px"
                    $mdHeightList=""
                    $smHeightList=""
                    $xlGapList="12px"
                    $mdGapList=""
                    $smGapList=""
                    $xlFontSizeList="16px"
                    $mdFontSizeList=""
                    $smFontSizeList=""
                  />
                </S.LabelFormUser>

                <Input
                  name="password"
                  placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
                  isStar={ true }
                  btnEye
                  $error={ errPassword }
                  value={ values.password }
                />
                <Note
                  $fill={ accent }
                  text='–ë—ñ–ª—å—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞, —Ü–∏—Ñ—Ä–∏ —ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∑–Ω–∞–∫'
                />

                <div>
                  <S.WrappCapcha $error={ errCapcha } $accept={ isCheckCapcha }>
                    <S.LabelCheckbox>
                      <S.InputCheckbox type="checkbox" name="capcha" />
                      <span></span>
                      I‚Äôm not robot
                    </S.LabelCheckbox>

                    <img
                      src={ reCapcha }
                      width="40"
                      height="38"
                      alt="re Capcha"
                    ></img>
                  </S.WrappCapcha>
                </div>

                <S.WrappPolicy>
                  <S.LabelCheckbox>
                    <S.InputCheckbox type="checkbox" name="accept" />
                    <span></span>

                    <S.TextPolicy>
                      {'–Ø –ø—Ä–∏–π–º–∞—é '}
                      <span>
                        <S.LinkPolicy>–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ</S.LinkPolicy>
                      </span>
                      {' —Ç–∞ '}
                      <span>
                        <S.LinkPolicy> –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</S.LinkPolicy>
                      </span>
                    </S.TextPolicy>
                  </S.LabelCheckbox>
                </S.WrappPolicy>

                <BtnRegistration
                  xlMarginBottom="30px"
                  color={ white }
                  xlHeight="60px"
                  smHeight="45px"
                  bgColorGradient={ bgColorGradientBtn }
                  // onRegister={ 'callback' }
                >
                  <S.BtnText> –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å</S.BtnText>
                </BtnRegistration>
              </S.FormEmail>
            );
          }}
        </Formik>

        <S.TextPolicy>
          {'–¶–µ–π —Å–∞–π—Ç –∑–∞—Ö–∏—â–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—î—é reCAPTCHA, –¥–æ –Ω—å–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è '}
          <span>
            <S.LinkPolicy
              style={ {
                fontWeight: '600',
              } }
            >
              –ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
            </S.LinkPolicy>
          </span>
          {' —Ç–∞ '}
          <span>
            <S.LinkPolicy
              style={ {
                fontWeight: '600',
              } }
            >
              –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            </S.LinkPolicy>
          </span>
          {' Google.'}
        </S.TextPolicy>
      </S.Article>
    </S.Modal>
  );
};
